//Swatchbook color manager

//TODO remove requirement for all color values to have a map value
$color-palettes: (
  light: (fg: #333, bg: #f8f8f8, accent: #ba9f61, fg-subtle: #808080, bg-subtle: #e5e5e5)
) !default;

//Set the default palette.
//This can be an index number or a string name that corresponds to an item in the $color-palettes list.
//The $palette-index variable is also temporarily modified as functions reference other palettes
//but it is always restored to the user defined value.
$palette-index: 1;

// Convert Hue, Saturation, Brightness, & Alpha to Hex
// Function Author:  Alexander Futekov via SitePoint
// Source URL: http://codepen.io/SitePoint/pen/fpqDg
// Reference: http://www.sitepoint.com/hsb-colors-with-sass/
@function hsb($h-hsb, $s-hsb, $b-hsb, $a: 1) {
  @if $b-hsb == 0 {
    @return hsla(0, 0, 0, $a)
  } @else {
    $l-hsl: ($b-hsb/2) * (2 - ($s-hsb/100));
    $s-hsl: ($b-hsb * $s-hsb) / if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2);
    @return hsla($h-hsb, $s-hsl, $l-hsl, $a);
  }
}

//Searches high and low for a palette
@function find-palette($palette) {
  @if type-of($palette) == "list" or type-of($palette) == "map"{
    @return $palette;
  } @elseif map-has-key($color-palettes, $palette) {
    @return  map-get($color-palettes, $palette);
  } @elseif type-of($palette) == "number" {
    @return  nth(map_values($color-palettes), $palette);
  } @else {
    @error "Palette does not exist: " + $palette;
  }
}


//Return a color from a palette
@function color($color, $palette: $palette-index){
  $palette: find-palette($palette);
  @if type-of($color) == "number" {
    @return nth($palette, $color);
  } @else {
    @return map-get($palette, $color);
  }
}

@mixin palette($palette: false) {
  $palette-index-temp: $palette-index; //store the user defined $palette-index
  @if $palette == false { //Iterate through all the color palettes if no single palette is specified
    @each $name, $palette in $color-palettes {
      $name: "." + $name;
      $selector: &;
      $palette-index: find-palette($palette) !global;
      @at-root {
        #{$name}-palette #{$selector} {
          @content;
        }
      }
    }
  } @elseif $palette == placeholder or $palette == "%" {
    @each $name, $palette in $color-palettes {
      $name: "%" + $name;
      $selector: &;
      $palette-index: find-palette($palette) !global;
      @at-root {
        #{$name}-palette #{$selector} {
          @content;
        }
      }
    }
  } @else {
    $selector: &;
    $palette-index: find-palette($palette) !global;
    @if $selector == null {
      @content;
    } @else {
      @at-root {
        #{$selector} {
          @content;
        }
      }
    }
  }
  $palette-index: $palette-index-temp !global; //restore the user defined value
}
