//Swatchbook color manager

//TODO remove requirement for all color values to have a map value
$color-palettes: (
  light: (fg: #333, bg: #f8f8f8, accent: #ba9f61, fg-subtle: #808080, bg-subtle: #e5e5e5)
) !default;

//Searches high and low for a palette
@function find-palette($palette) {
  @if type-of($palette) == "list" or type-of($palette) == "map"{
    @return $palette;
  } @elseif map-has-key($color-palettes, $palette) {
    @return  map-get($color-palettes, $palette);
  } @elseif type-of($palette) == "number" {
    @return  nth(map_values($color-palettes), $palette);
  } @else {
    @error "Palette does not exist: " + $palette;
  }
}

//Defines or resets global default palette
@mixin set-palette-default($palette: 1){
  $palette-default: find-palette($palette) !global;
}

//Defines or resets global temporary palette from which colors are pulled for use
//Sets the operational palette variable (colors are always pulled from $palette-temp)
@mixin set-palette-temp($palette: $palette-default){
  $palette-temp: find-palette($palette) !global;
}

@include set-palette-default();

@include set-palette-temp();

@function color($color, $palette: $palette-temp){
  $palette: find-palette($palette);
  @if type-of($color) == "number" {
    @return nth($palette, $color);
  } @else {
    @return map-get($palette, $color);
  }
}

@mixin palette($palette: false) {
  @if $palette == false {
    @each $name, $palette in $color-palettes {
      $name: "." + $name;
      $selector: &;
      $palette-temp: find-palette($palette) !global;
      @at-root {
        #{$name}-palette #{$selector} {
          @content;
        }
      }
    }
  } @elseif $palette == placeholder or $palette == "%" {
    @each $name, $palette in $color-palettes {
      $name: "%" + $name;
      $selector: &;
      $palette-temp: find-palette($palette) !global;
      @at-root {
        #{$name}-palette #{$selector} {
          @content;
        }
      }
    }
  } @else {
    $selector: &;
    $palette-temp: find-palette($palette) !global;
    @if $selector == null {
      @content;
    } @else {
      @at-root {
        #{$selector} {
          @content;
        }
      }
    }
  }
  @include set-palette-temp();
}
