// Media Query Handler
// Currently only supports 'and' operations
// Does not support 'not' or comma separated queries
// Define responsive ranges
// Number range must be first two items in list
// If units are different, smaller size should be first
// But additional media rules can follow and will be implemented
$media-queries: (
  sm: ("<", 480px),
  md: (17em, 57rem),
  lg: (729px, 1280px),
  xlg: (">", 2560px)
) !default;

@function unit-base($number) {
  //TODO add more unit-bases?
  $unit-bases: (px: 1px, em: 1em/16, rem: 1rem/16);
  @return map-get($unit-bases, unit($number));
}

//Searches high and low for the query
@function find-query($query) {
  @if type-of($query) == "list" or type-of($query) == "map"{
    @return $query;
  } @elseif map-has-key($media-queries, $query) {
    @return  map-get($media-queries, $query);
  } @elseif type-of($query) == "number" {
    @return  nth(map_values($media-queries), $query);
  } @else {
    @error "Query does not exist: " + $query;
  }
}

//TODO rename $one and $two more descriptively
@function media-width($one, $two) {
  @if type-of($one) == "string" and type-of($two) == "number" {
    @if $one == "<" {
      @return "(max-width: #{$two})";
    } @elseif $one == ">" {
      @return "(min-width: #{$two})";
    }
  } @elseif type-of($one) == "number" and type-of($two) == "number" {
    @if unit($one) != unit($two) or $one < $two {
      @return "(min-width: #{$one}) and (max-width: #{$two})";
    } @else {
      @return "(min-width: #{$two}) and (max-width: #{$one})";
    }
  }
  @return null; //Should this be an @error?
}

@mixin media($query...) {
  $media-width: null;
  @if length($query) > 1 {
      $media-width: media-width(nth($query, 1), nth($query, 2));
  } @else {
    $query: nth($query, 1); //Convert to a single value from arglist
    @if str-index($query, "<=") == 1 {
      $query: str-slice($query, 3, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 2));
    } @elseif str-index($query, ">=") == 1 {
      $query: str-slice($query, 3, str-length($query));
      $query: find-query($query);
      $media-width: media-width(">", nth($query, 1));
    } @elseif str-index($query, "<") == 1 {
      $query: str-slice($query, 2, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 1) - unit-base(nth($query, 1)));
    } @elseif str-index($query, ">") == 1 {
      $query: str-slice($query, 2, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 2) + unit-base(nth($query, 2)));
    } @else {
      $query: find-query($query);
      $media-width: media-width(nth($query, 1), nth($query, 2));
    }
  }

  $media-rules: "";
  @if length($query) > 2 {
    @for $i from 3 through length($query) {
      @if $media-rules == "" {
        $media-rules: nth($query, $i) + " and ";
      } @else {
        $media-rules: $media-rules + nth($query, $i) + " and ";
      }
    }
  }

  @media #{$media-rules + $media-width} {
    @content;
  }
}
