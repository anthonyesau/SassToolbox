// Media Query Handler
// Currently only supports 'and' operations
// Does not support 'not' or comma separated queries

// Define responsive ranges
// Number range must be first two items in list
// If units are different, smaller size should be first
// But additional media rules can follow as additional list items and will be included in the media query
$media-queries: (
  sm: ("<", 480px),
  md: (481px, 728px),
  lg: (729px, 1280px),
  xlg: (">", 1280px)
) !default;

//Create sets of values that vary across media queries
$responsive-values: (
  foo: ("first" "second" "third" "fourth"),
  bar: ("apples" "bananas" "oranges" "pineapples" "cherries")
) !default;

//TODO allow these to be the name of a query as defined in $media-queries
$media-query-index-default: 1 !default;
$media-query-index: 1 !default;

//Return the smallest quantity for a given unit label
@function unit-base($number) {
  //TODO add more unit-bases?
  $unit-bases: (px: 1px, em: 1em/16, rem: 1rem/16);
  @return map-get($unit-bases, unit($number));
}

//Return the index of a key within a map
@function key-index($map, $key) {
  $keys: map-keys($map);
  $index: index($keys, $key);
  @return $index;
}

//Return a value from $responsive-values based on the media query index and the key (name of the value set)
//TODO allow the argument to be only a single list
@function responsive-value($key, $values: $responsive-values) {
  $list: null;
  @if type-of($values) == "map" {
    $list: map-get($values, $key);
  } @elseif type-of($values) == "list" {
    $list: $values;
  }
  @if $list == null {
    @error "Key for responsive value does not exist: " + $key;
  } @else {
    $value: nth($list, $media-query-index);
    @return $value;
  }
}

//Searches high and low for the query
@function find-query($query) {
  @if type-of($query) == "list" or type-of($query) == "map"{
    @return $query;
  } @elseif map-has-key($media-queries, $query) {
    $media-query-index: key-index($media-queries, $query) !global; //Set the query index
    @return  map-get($media-queries, $query);
  } @elseif type-of($query) == "number" {
    $media-query-index: $query !global; //Set the query index
    @return  nth(map_values($media-queries), $query);
  } @else {
    @error "Query does not exist: " + $query;
  }
}

//Returns a string containing a media query width rule
//TODO rename $one and $two more descriptively
@function media-width($one, $two) {
  @if type-of($one) == "string" and type-of($two) == "number" {
    @if $one == "<" {
      @return "(max-width: #{$two})";
    } @elseif $one == ">" {
      @return "(min-width: #{$two})";
    }
  } @elseif type-of($one) == "number" and type-of($two) == "number" {
    @if unit($one) != unit($two) or $one < $two {
      @return "(min-width: #{$one}) and (max-width: #{$two})";
    } @else {
      @return "(min-width: #{$two}) and (max-width: #{$one})";
    }
  }
  @return null; //Should this be an @error?
}

@mixin media($query...) {
  $media-width: null;
  @if length($query) > 1 {
      $media-width: media-width(nth($query, 1), nth($query, 2));
  } @else {
    $query: nth($query, 1); //Convert to a single value from arglist
    @if str-index($query, "<=") == 1 {
      $query: str-slice($query, 3, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 2));
    } @elseif str-index($query, ">=") == 1 {
      $query: str-slice($query, 3, str-length($query));
      $query: find-query($query);
      $media-width: media-width(">", nth($query, 1));
    } @elseif str-index($query, "<") == 1 {
      $query: str-slice($query, 2, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 1) - unit-base(nth($query, 1)));
    } @elseif str-index($query, ">") == 1 {
      $query: str-slice($query, 2, str-length($query));
      $query: find-query($query);
      $media-width: media-width("<", nth($query, 2) + unit-base(nth($query, 2)));
    } @else {
      $query: find-query($query);
      $media-width: media-width(nth($query, 1), nth($query, 2));
    }
  }

  $media-rules: "";
  @if length($query) > 2 {
    @for $i from 3 through length($query) {
      @if $media-rules == "" {
        $media-rules: nth($query, $i) + " and ";
      } @else {
        $media-rules: $media-rules + nth($query, $i) + " and ";
      }
    }
  }

  @media #{$media-rules + $media-width} {
    @content;
  }

  $media-query-index: $media-query-index-default !global; //Reset the index to default
}
